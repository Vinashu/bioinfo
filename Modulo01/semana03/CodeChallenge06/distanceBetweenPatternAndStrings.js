var pattern = 'AAA';
var dna = [
    'TTACCTTAAC',
    'GATATCTGTC',
    'ACGGCGTTCG',
    'CCCTAAAGAG',
    'CGTCAGAGGT'
];
var output = 5;
var answer = distanceBetweenPatternAndStrings(pattern,dna);
console.log(output);
console.log(answer);
console.log(output === answer);
console.log("----------------");

pattern = 'TAA';
dna = [
    'TTTATTT',
    'CCTACAC',
    'GGTAGAG'
];
output = 3;
answer = distanceBetweenPatternAndStrings(pattern,dna);
console.log(output);
console.log(answer);
console.log(output === answer);
console.log("----------------");

pattern = 'AAA';
dna = [
    'AAACT',
    'AAAC',
    'AAAG'
];
output = 0;
answer = distanceBetweenPatternAndStrings(pattern,dna);
console.log(output);
console.log(answer);
console.log(output === answer);
console.log("----------------");

pattern = 'AAA';
dna = [
    'TTTTAAA',
    'CCCCAAA',
    'GGGGAAA'
];
output = 0;
answer = distanceBetweenPatternAndStrings(pattern,dna);
console.log(output);
console.log(answer);
console.log(output === answer);
console.log("----------------");

pattern = 'AAA';
dna = [
    'AAATTTT',
    'AAACCCC',
    'AAAGGGG'
];
output = 0;
answer = distanceBetweenPatternAndStrings(pattern,dna);
console.log(output);
console.log(answer);
console.log(output === answer);
console.log("----------------");

pattern = 'ACATAG';
dna = [
'CATCTAGTAATTGAAGACTTGTTAGACAGCTTAATGTGCTCACGACCCGAAATGGAGAGACTGGTCAGTAGAAAAACGGTCGGCTAGGCGATG',
'GCCAAACTGTTGCAATATGGTTTGTACCGCCCTGTATCACTCTTGCACGGGTGGGATCGAAATGAGATAATGTTGAACAAAACGTGGAATTTG', 'AACCAGTAGCTGAACGCGGCAAATGCCGGCCGAAATGAGCGTAGGGACAACCGGGTCTATATGTTCATTAGGTAGGCTGGAGGCGTGCCGGCC', 'CCGTCATCCTGTTGGAGAGTCGTGGGCACATTTGGGCCGGAGAGTGGTGTCGGACTCGAGTATCCACTTACGGAACTCACTCGAAGGAGGAGC', 'GCCCCGCTCAACAGGACGAGATGGGATTGTGGCGCGGGCTGCATATCCTCCGCCAACGAGGCATAAAATCCCTGCACAGATTTTGGTTGCTTC', 'TTGGCACATGCTTAATGTACAGCCGATGAAAAAGCCGGGTACAATGCAGAACCATCGACTTGTTATGATTACTCTGCCTGACGGTGAGTCCAT', 'TCATTAAGGAGGGAGATCCACGTGTCGTCGAATGGTGGACCCTCGCAGAACACAAAGAATGGCACTAGGCGTGATCTATGCCACACCAAGTGC', 'GTGATTTCATGCCAGATATCCTCTGAACAACCATACATTTACCGTTCCTGGATACATCTCCACTCAACTTGAAATCTAGTCGTCTGAGGCTGC', 'AACGGTAAGTAGCAGTATGCGGACCGCGAAGGGGGATAGCAGATTCTCGCTAATTTTTTGGGTCAGGGCCGACCTATAAAGGACTGCTAGGCT', 'CCATACTACCTCACTTCAAGTCTACTGTTGCTTGTTAATGTGGGAAGTACATGTCGCGCCACTCGGTGAGCTAACGAAGGGTCGTCAAGACGA', 'CTTAACGTACATATCGCTCAACCGCTACCTGTTAGGGTTAAATCAAACAGATACTCTCACCGCTAAGCCACAAAGTCAGCGGAGTACCCATAA', 'GCGGCATATGAGATTAGTGCGAGCTTGCGGGGACCACTGGACTTTGCGTGGTTCGGGTTCTTGCATGGTTGCCACGAGCGGTACTGTACGGCA', 'GAGGCGCCTTGATATGCCATGCAGGGGCTATTATGACGAGCGACATCCCATTTAAGTCTAACGCCCAGCATGAGTAAATTAAGGGCTTGTAGC', 'GACCGTGCCTTAGTTGACCACGCGCGATTGCCTCGAGACCAACCCACCATCATGTACTAAACCATTCGAATGAAGGATACCATAGGGTCTTAA', 'CATACTATCCTGGTAATTGAATTGCGTTTCAGCATAAAGCGATGGACGAAGCGGGTGAAGCCTGAAATTGGTATTCCCACTGCCACCACAATC', 'TAATAGGAATGGTGGACTCAGCCCGACCGACCCATGGGGGCTAACCGATGGTTTGTGGGCAGTCTTGAAACCAAAACCTACAGAAACTCTCGG', 'ATAAACGTACAAACGTCAGAATCGGTGATAAATCGAAACGGGATTGTGGTTGGCGTGTCGAATGTGTCTAGCCAGATAAAACTAGCGCAGAGA', 'CATAACCTGGGTCGTTGACCGAGGGCAGCAACAGGCTGGATATCCTACAGTTACCTGTTGCTTGTAACAGCTCTAAGAGGCAAGATTGTATAT', 'TTCGTAACCAATCGATCACGTTAGGGCCCGTCCGGGTATGTAGCAACTGCGAGGCAGCTTCCATGCGTGCGTCGTCGAATTGTCGAACCTCGT', 'TCGCTAAAGGGAAGCGGCGGTCATTCAGAAGGTTTTGATCGCTTCAAACAAAGGTGAAGATCCTGAGGACCAACTGCCGACCGGTCCTTCGTA', 'TCCGGGTAGATCCTGATTCCCACTTACTTACAGTTAAGTGCCTGCACCAATGCGGCGGTATAGCCAACCAGACGAGAGGCGGGAAGCACCCAG', 'AGTGTACGCCCGCGCTCTCGTTAAGGGACGGATGGGGAGATCATCCCACGCACGGTGGCGCTCCTCCACACTATTGCTCGCTTCTTGGACGCT', 'TGTTCTAGGTCCTAGGCGTAGCGTACTTGGAGCAGTCGTCGAGTCCTAACATATACGCCTGGTCCAAGATACAATCTCAATCCAGACTGAGTA', 'ACAGGAACGCTTTAACGAGCCTTCTGTCGCCACAGCCACCGAGAACAATGCATTTCGCCAACTGCTAAAGGTTATTTCGGTGTAAGGCCCACA', 'GTAAAAACTTAATTTACAGCACCAGGGGTTGCGATAAGAAATCCCTAACATATACAACAGCTCGTTGAAACTCGAAATTAGGTAACCACCGAG', 'CCCGGTGGCGAAGTCTTGTTGAAAGATGCGGGTCTCCGTATCTAGCTCGGCCTAATCGGAGATTCGATAATCGTCTTGTTCGGATAGGCCAAT', 'GAGAACGCCTTTAGCTGGCATGCCTATTATCAACTTTAGCAGAACGGCGACGACTGTGTAGATATCCCTCTTCGCAAGAGCCCATTCGACGAC', 'ACGAGGCCCAGACTTGTAGTTAGATGATACTTCTTATAATGTGTTCTTATCAGTAGCGTTGTGCGAAGCTGGAATTTCCCCGCATTTGAGGGA', 'GGCCCGGCATGTGGTGGATGAAACACAGCGTTTCTGCCCAACTCAACGGGGGTTGAAGCCTAAGATACGATTTAAGTAATTACCTTCATGGCC', 'GATCAGCTCGATATTCCCGAGATTGGGGGATTTAGGGTTACTACCACATATCTGTCATCACACATGGACGGTAGGCCAAATTGGGAAATATAA', 'TCTATGGTCTTCACGTCTGCTGGGAGCTGCTCATTTTGGGGAGTTTTGCGTAACCTGGGCTACTCATCAACCGCGATAGTGCTGACAATTGGG', 'AGGGAATCGACTGACTACTACATTACTCAACCGGTGAATAAGTGTTAAGGGCTGCTAGGCCCCAGTACCCCCAGTACATGTCGGTATTGTAGA', 'TGAGATTGCACCACTGCTTGGAAAAGGCTGTCTAGCCCACCCGTGCCAGGGCAGATTTACTACACAATAGCCCTCAGGCGTCAGGAAGCTCAC', 'GTCGGGACAGGTACAATCTTTGTAGGGGTAGGATGAGCCAAGCCGCTGGCAAGCTTGGACGATCTTGTTTTGCCAAGAGAACACGAGGTTGGT', 'GGCTGTCGTATCCCAGTACGGCGCCATATTACCGAGAGCGCATCACGCGTCCTCGAGGCGATCTCCAATCCTACCGAGTGGACGACGCTTAGA', 'GGTTGGCAGGCCCCGACGGAGTTGCCCTGCCGGTATACACTAGATTTATACTTTTGTTAAGTGTGACGGGCGTTCCTAGCTATACCACCAAGA', 'GGTAAAAGGCCATCGTCTCAGCCCGTGTGGCGCACCCCTGAAATGACTGCATTCTCGGATTCGGTAACGGTGCAAGCCGCTAACGCGCTCTAC', 'TGAACGTCCGCTGATTCCACCACATCAGTCTCCCTACAGGAAGACGCTTCTAGTCTTGAACACGGAAGGGTTTCGTCGGACGAATCTAACGTG', 'TGGCTATCCATACCGTTCCTAGACTAGCCTCATTGCTCCGAATTCACATCAGGGGGGAGAAAACAAGGTAGGATCGGCGCGAATTCTATGACA'
];
output = 72;
answer = distanceBetweenPatternAndStrings(pattern,dna);
console.log(output);
console.log(answer);
console.log(output === answer);
console.log("----------------");

function distanceBetweenPatternAndStrings(pattern, dna){
    var k = pattern.length;
    var distance = 0;
    var hDistance;
    var patterns = [];
    dna.forEach(function(text){
        hDistance = Number.MAX_VALUE;
        patterns = findPatterns(text,k);
        patterns.forEach(function(kmer){
            if (hDistance > hammingDistance(pattern, kmer)){
                hDistance = hammingDistance(pattern, kmer);
            }
        })
        distance = distance + hDistance
    });
    return distance
}

function hammingDistance(text1, text2) {
    var max = text1.length;
    var distance = 0;  
    for (var i = 0; i < max; i++ ) {
        if (text1.charAt(i) != text2.charAt(i)) {
            distance++;
        }
    } 
    return (distance);
}

function findPatterns(text, k){
    var patterns = [];
    var max = text.length - k;
    var pattern;
    for(var i = 0; i <= max; i++){
        pattern = text.substring(i, i+k);
        patterns.push(pattern);
    }
    return patterns;
} 