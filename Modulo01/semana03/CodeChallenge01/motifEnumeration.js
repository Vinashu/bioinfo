var k = 3;
var d = 1;
var dna = [
    'ATTTGGC',
    'TGCCTTA',
    'CGGTATC',
    'GAAAATT'
];
var output = 'ATA ATT GTT TTT';
var answer = motifEnumeration(dna, k, d); 
console.log("Outuput = " + output);
console.log("Answer = " + answer);
console.log(answer === output);
/*
k = 5;
d = 2;
var dna = [
    'TCTGAGCTTGCGTTATTTTTAGACC',
    'GTTTGACGGGAACCCGACGCCTATA',
    'TTTTAGATTTCCTCAGTCCACTATA',
    'CTTACAATTTCGTTATTTATCTAAT',
    'CAGTAGGAATAGCCACTTTGTTGTA',
    'AAATCCATTAAGGAAAGACGACCGT'
];

output = "AAACT AAATC AACAC AACAT AACCT AACTA AACTC AACTG AACTT AAGAA AAGCT AAGGT AAGTC AATAC AATAT AATCC AATCT AATGC AATTC AATTG ACAAC ACACA ACACC ACACG ACACT ACAGA ACAGC ACATC ACATG ACCAT ACCCT ACCGT ACCTA ACCTC ACCTG ACCTT ACGAC ACGAG ACGAT ACGCT ACGGT ACGTC ACGTT ACTAA ACTAG ACTAT ACTCA ACTCC ACTCG ACTCT ACTGA ACTGC ACTGT ACTTA ACTTC ACTTT AGAAA AGAAC AGAAG AGAAT AGACA AGACT AGATA AGATC AGCAT AGCCA AGCGT AGCTA AGCTC AGCTG AGCTT AGGAT AGGTA AGGTC AGTAA AGTAC AGTAT AGTCC AGTCG AGTCT AGTGA AGTTG ATAAA ATAAC ATACA ATACC ATAGA ATATA ATATC ATATG ATATT ATCAG ATCCC ATCCG ATCCT ATCGA ATCGC ATCTA ATCTC ATCTG ATGAC ATGAT ATGCA ATGCC ATGGA ATGGC ATGTA ATGTC ATTAA ATTAC ATTAG ATTAT ATTCA ATTCC ATTCG ATTGA ATTGC ATTGG ATTGT ATTTA ATTTC ATTTG ATTTT CAAAG CAACC CAACT CAAGA CAAGC CAATA CAATT CACAC CACAG CACCT CACGT CACTA CACTT CAGAA CAGAC CAGAT CAGGT CAGTA CAGTC CATAA CATAC CATAG CATAT CATCC CATCT CATGA CATGT CATTA CATTG CATTT CCAAG CCATA CCATG CCATT CCCGT CCCTA CCCTT CCGAA CCGAC CCGAT CCGCT CCGGT CCGTA CCGTC CCGTG CCGTT CCTAC CCTAT CCTCA CCTCC CCTTA CCTTC CCTTG CCTTT CGAAA CGAAG CGACA CGACT CGAGT CGATA CGATG CGATT CGCAA CGCAT CGCCA CGCGA CGCTA CGCTC CGCTT CGGAC CGGAT CGGCA CGGTA CGGTC CGGTT CGTAA CGTAC CGTCA CGTCG CGTCT CGTTA CGTTT CTAAC CTAAG CTAAT CTACA CTACC CTACG CTACT CTAGA CTAGC CTAGG CTAGT CTATA CTATC CTATG CTATT CTCAT CTCCG CTCGT CTCTA CTCTT CTGAA CTGAG CTGCA CTGCC CTGTA CTGTT CTTAA CTTAC CTTAG CTTAT CTTCA CTTGA CTTTA CTTTC CTTTG CTTTT GAAAT GAACA GAACT GAAGT GAATG GAATT GACAC GACAT GACCA GACCT GACGT GACTT GAGAA GAGAT GAGCT GATAA GATAC GATAG GATAT GATCA GATCC GATCG GATCT GATGT GATTA GATTC GATTG GATTT GCAAT GCACT GCATC GCATT GCCAT GCCGT GCCTA GCCTT GCGAT GCGGT GCGTC GCGTT GCTAA GCTAC GCTAG GCTAT GCTGA GCTGT GCTTA GCTTT GGAAT GGACA GGATA GGATC GGATT GGCTA GGGAT GGTAC GGTAG GGTAT GGTCA GGTCG GGTTA GTAAA GTAAG GTACA GTACC GTACG GTAGA GTATA GTATC GTATG GTATT GTCAA GTCAG GTCCG GTCCT GTCGA GTCGC GTCGT GTCTA GTCTG GTGAA GTGAG GTGCA GTGCG GTTAA GTTAC GTTAG GTTAT GTTCA GTTCC GTTCG GTTGA GTTTA TAAAC TAAAG TAACA TAACC TAACT TAAGA TAAGC TAATA TAATC TACAC TACAG TACCC TACCG TACCT TACGA TACGC TACGT TACTA TACTC TACTG TAGAA TAGAC TAGAG TAGAT TAGCC TAGCG TAGGA TAGTC TATAA TATAC TATAT TATCA TATCC TATCG TATGA TATGC TATGG TATGT TATTA TATTG TCAAC TCAAT TCACC TCACG TCACT TCAGA TCATA TCATG TCCAA TCCAC TCCAG TCCAT TCCCA TCCCT TCCGA TCCGC TCCGT TCCTA TCCTG TCCTT TCGAA TCGAC TCGAT TCGCC TCGCT TCGGA TCGGC TCGGG TCGGT TCGTC TCTAC TCTAG TCTAT TCTCC TCTCT TCTGG TCTGT TCTTA TCTTT TGAAA TGAAC TGAAT TGACA TGACC TGACT TGAGA TGAGC TGAGT TGATA TGATC TGATG TGATT TGCAA TGCAC TGCAG TGCAT TGCCA TGCCG TGCCT TGCGA TGCGT TGCTT TGGAA TGGAT TGGTA TGTAA TGTAG TGTAT TGTCC TGTCG TGTGG TGTTA TTAAA TTAAC TTAAG TTAAT TTACA TTACC TTACG TTACT TTAGA TTAGC TTAGG TTAGT TTATA TTATC TTATG TTATT TTCAA TTCAC TTCAT TTCCA TTCCC TTCCT TTCGA TTCGG TTCGT TTCTA TTCTG TTGAA TTGAC TTGAG TTGAT TTGCA TTGCG TTGGA TTGGG TTGTG TTTAA TTTAC TTTAG TTTAT TTTCA TTTCC TTTCG TTTGA TTTGG TTTTA TTTTG";

answer = motifEnumeration(dna, k, d); 
console.log("Outuput = " + output);
console.log("Answer = " + answer);
console.log(answer === output);

k = 5;
d = 2;
var dna = [
    'GGGCAGTCGTGACGCTCGGCACCAA',
    'CCCCAGCAAATCTTTATTTACCACT',
    'TCGAAAAACGGGACAACTATTGGGG',
    'CTGGCTTCGTTCGAAACAAGCCAAC',
    'TCGAAGCTACATTCATCTAGGTGGT',
    'GCAAAACGAGTAGATAACCGTTTTA'
];

output = "AAACA AAACC AAACG AAACT AAAGC AAAGT AAATC AACAA AACAC AACAG AACAT AACCA AACCC AACCG AACCT AACGA AACGC AACGT AACTA AACTC AAGAA AAGAC AAGAT AAGCA AAGCC AAGCG AAGCT AAGGC AAGGT AAGTA AAGTC AAGTG AAGTT AATAA AATAG AATCA AATCC AATCG AATCT AATGA AATGC AATTC ACAAA ACAAC ACAAG ACAAT ACACA ACACC ACACG ACACT ACAGA ACAGC ACAGG ACAGT ACATA ACATC ACATG ACATT ACCAA ACCAC ACCAG ACCAT ACCCA ACCCT ACCGA ACCGT ACCTA ACCTC ACCTG ACCTT ACGAA ACGAC ACGAG ACGAT ACGCA ACGCC ACGCT ACGTA ACGTC ACGTT ACTAA ACTAC ACTAG ACTAT ACTCG ACTGC ACTTA ACTTG ACTTT AGAAA AGAAC AGAAG AGACA AGACT AGAGA AGATC AGATG AGCAA AGCAC AGCAG AGCAT AGCCA AGCCG AGCGA AGCGC AGCGG AGCGT AGCTA AGCTC AGCTG AGCTT AGGAA AGGAC AGGAG AGGAT AGGCA AGGGA AGGTA AGGTC AGTAA AGTAC AGTAG AGTCA AGTCG AGTCT AGTGA AGTTA AGTTG AGTTT ATAAA ATACC ATACG ATACT ATAGT ATCAA ATCAC ATCAG ATCAT ATCCA ATCCG ATCGA ATCGC ATCGG ATCGT ATCTA ATCTT ATGAA ATGGT ATGTT ATTAA ATTAG ATTCA ATTCC ATTCG ATTCT ATTGA ATTGG ATTGT ATTTG CAAAA CAAAC CAACA CAACC CAACG CAACT CAAGA CAAGC CAAGG CAAGT CAATA CAATC CAATG CAATT CACAA CACAC CACAG CACAT CACCA CACCC CACCG CACGC CACGG CACGT CACTA CACTT CAGAA CAGAC CAGCA CAGCC CAGCG CAGCT CAGGA CAGGT CAGTT CATAA CATAC CATCA CATCC CATCG CATCT CATGA CATGT CATTA CATTC CATTG CATTT CCAAA CCAAC CCAAT CCACA CCACC CCACG CCACT CCAGA CCAGC CCAGG CCAGT CCATC CCATG CCATT CCCAA CCCAT CCCTA CCCTT CCGAA CCGAC CCGAG CCGAT CCGCA CCGCT CCGGA CCGGG CCGGT CCGTA CCGTG CCGTT CCTAA CCTAG CCTCT CCTTG CGAAA CGAAC CGAAG CGACA CGACC CGACG CGACT CGAGA CGAGC CGAGG CGAGT CGATA CGATC CGATT CGCAA CGCAG CGCAT CGCCT CGCGA CGCTA CGCTT CGGAA CGGAG CGGAT CGGCT CGGTA CGTAA CGTAC CGTAG CGTAT CGTCA CGTCT CGTGA CGTGC CGTTA CGTTG CGTTT CTAAC CTAAG CTACA CTACC CTACG CTAGA CTAGC CTAGG CTAGT CTATC CTCAA CTCGA CTCGT CTCTA CTCTT CTGAA CTGAG CTGAT CTGCT CTGGA CTGTA CTGTC CTGTG CTGTT CTTAA CTTAG CTTGA CTTGT CTTTA CTTTC CTTTG GAAAC GAAAG GAAAT GAACA GAACC GAACT GAAGA GAAGC GAAGT GAATC GAATT GACAA GACAC GACAG GACAT GACCC GACCT GACGA GACTA GACTC GACTT GAGAA GAGAT GAGCA GAGCC GAGCG GAGCT GAGTC GATAC GATCA GATCG GATCT GATTC GATTG GCAAA GCAAC GCAAG GCAAT GCACA GCACC GCAGA GCAGC GCAGG GCATA GCATC GCATT GCCAA GCCAC GCCAG GCCAT GCCGG GCCTA GCGAA GCGAC GCGAG GCGAT GCGCA GCGGA GCGTA GCTAA GCTAC GCTAG GCTAT GCTCA GCTCT GCTGT GCTTG GCTTT GGAAA GGAAC GGAAG GGAAT GGACA GGACC GGAGA GGAGC GGATA GGATC GGATT GGCAA GGCAG GGCGA GGCTA GGGAA GGTAA GGTAC GGTAT GGTCT GGTTA GTAAA GTAAC GTAAG GTAAT GTACA GTACC GTACG GTACT GTAGA GTAGT GTATC GTATT GTCAA GTCAC GTCAT GTCCA GTCTA GTCTT GTGAA GTGAC GTGCA GTGTT GTTAA GTTAC GTTAG GTTAT GTTCA GTTGA GTTGC GTTGT GTTTG GTTTT TAAAG TAACA TAACC TAACT TAAGC TAAGT TAATC TACAA TACAC TACAG TACCA TACCT TACGA TACGC TACGG TACGT TACTA TAGAC TAGCA TAGCG TAGCT TAGGA TAGGT TAGTA TAGTC TAGTG TAGTT TATCA TATCG TATGA TATGC TATTC TCAAA TCAAC TCAAG TCAAT TCACA TCACC TCACG TCACT TCAGA TCAGC TCATA TCATC TCATT TCCAA TCCAG TCCAT TCCGA TCCGG TCCTA TCGAA TCGAC TCGAG TCGAT TCGCC TCGCT TCGGT TCGTA TCGTC TCGTG TCGTT TCTAA TCTAG TCTCA TCTGA TCTGT TCTTA TCTTC TCTTG TCTTT TGAAA TGAAC TGAAT TGACA TGACC TGACG TGAGC TGAGT TGATA TGATT TGCGA TGCTA TGGAA TGGAC TGGTT TGTAA TGTAC TGTCA TGTGT TGTTA TGTTC TGTTG TTAAC TTAAG TTACA TTACG TTACT TTAGC TTAGG TTAGT TTCAA TTCCG TTCGA TTCGT TTCTG TTCTT TTGAA TTGAC TTGAG TTGAT TTGCA TTGCT TTGGT TTGTA TTGTC TTGTG TTGTT TTTCG TTTGA TTTGG TTTGT TTTTG";

answer = motifEnumeration(dna, k, d); 
console.log("Outuput = " + output);
console.log("Answer = " + answer);
console.log(answer === output);
*/

function motifEnumeration(dna, k, d) {
    var patterns = [];
    var neighborhood = [];
    var frequentPatterns = [];
    var frequencyArray = [];
    var max = Math.pow(4,k)-1; 
    var index;    
    var pattern;   
    var tam = dna.length;
    dna.forEach(function(text){
        neighborhood = [];
        patterns = findPatterns(text,k);
        patterns.forEach(function(pattern){
            neighborhood = neighborhood.concat(neighbors(pattern,d));
        });   
        neighborhood = removeDuplicate(neighborhood);
        frequentPatterns.push(neighborhood);
    });
    for (var i = 0; i <= max; i++){
        frequencyArray[i] = 0;
    }
    frequentPatterns.forEach(function(patterns){
        patterns.forEach(function(pattern){
            index = patternToNumber(pattern);
            frequencyArray[index] += 1;
        });  
    });         
    frequentPatterns = [];
    for (var i = 0; i <= max; i++){
        if(frequencyArray[i] >= tam){
            pattern = numberToPattern(i,k); 
            frequentPatterns.push(pattern);
        }
    }
    return frequentPatterns.join(" ");
}

function neighbors(pattern,d){
    if (d == 0){
        return pattern;
    } else if(pattern.length == 1){
        return ["A", "C", "G", "T"];
    }
    var nucleotide = ["A", "C", "G", "T"];     
    var neighborhood = [];
    var suffixNeighbors = neighbors(pattern.substr(1,pattern.length-1), d);
    suffixNeighbors.forEach(function(text, index, arr){
        if (hammingDistance(pattern.substr(1,pattern.length-1), text) < d) {
            nucleotide.forEach(function(x){
                neighborhood.push(x + text);
            });
        } else {
                neighborhood.push(pattern.charAt(0) + text);            
        }
    });
    return neighborhood;    
}

function hammingDistance(text1, text2) {
    var max = text1.length;
    var distance = 0;  
    for (var i = 0; i < max; i++ ) {
        if (text1.charAt(i) != text2.charAt(i)) {
            distance++;
        }
    } 
    return (distance);
}

function findPatterns(text, k){
    var patterns = [];
    var max = text.length - k;
    var pattern;
    for(var i = 0; i <= max; i++){
        pattern = text.substring(i, i+k);
        patterns.push(pattern);
    }
    return patterns;
}  

function removeDuplicate(conjunto) {
	var novo = []; 
    var max = conjunto.length;
	for(var i = 0; i < max; i++) {
		if (novo.indexOf(conjunto[i]) == -1) {
            novo.push(conjunto[i]);         
        }
	}   
	return novo;
}

function patternToNumber(pattern){
    tam = pattern.length;
    if(tam == 0) {
        return 0;
    } else {
        var symbol = pattern.charAt(tam-1);
        var prefix = pattern.substring(0, tam-1);      
        return 4 * patternToNumber(prefix) + symbolToNumber(symbol); 
    }
}

function symbolToNumber(symbol){
    switch(symbol) {
        case "A":
            return 0;
        case "C":
            return 1;
        case "G":
            return 2;
        case "T":
            return 3;
    }
}

function numberToPattern(index, k){
    if(k == 1) {
        return numberToSymbol(index);
    } else {
        var prefixIndex = parseInt(index / 4);
        var r = index % 4;        
        var symbol = numberToSymbol(r);
        var prefixPattern = numberToPattern(prefixIndex, k - 1);
        return prefixPattern + symbol; 
    }
}

function numberToSymbol(number){
    switch(number) {
        case 0:
            return "A";
        case 1:
            return "C";
        case 2:
            return "G";
        case 3:
            return "T";
    }
}